#+TITLE: Solution
#+SETUPFILE: ~/s3sync/org/conf/setup.config
#+FILETAGS: :recruiting:challenge:eth:analyse

* FAQ
- This section is used for myself to collect and research all related questions.

** Accounts, Contract, Transactions and Messages
*** What is an account?
- [[https://ethereum.org/en/whitepaper/#ethereum-accounts][https://ethereum.org/en/whitepaper/#ethereum-accounts]]
- There are *Externally Owned Accounts* and *Contract Accounts*

| #                 | description                                 |
|-------------------+---------------------------------------------|
| address           | 20-byte                                     |
| state transitions | transfer of value and info between accounts |
| 1. nonce          | unique counter                              |
| 2. ether balance  | current value                               |
| 3. contract value | contract identifier                         |
| 4. storage        |                                             |

**** Contract account
- contract code
- message (transaction) => activate code => (1) read/write storage | (2) send
  message | (3)create new contract account

*** What is a contract?
- Every contract has exactly one account <= =TODO: needs to be confirmed!!=
- Autonomous agents
- Executing specific code when receiving a message within a transaction
- Controls its own Key/Value store
- Controls its own Ether balance

*** What is the difference between a tx and a message?
- A *tx* is the /container/ around a message
- A *tx* is a signed data package to be sent from an externally owned account

**** 1. Transaction
#+begin_verse
ALWAYS PRODUCED BY AN EXTERNAL ACTOR
#+end_verse

- Each transaction consists of 6 components:

|  # | transaction | description                         | [transactions] column name |
|----+-------------+-------------------------------------+----------------------------|
| 1. | address     | recipient of the message            | to                         |
| 2. | signiture   | from sender                         | from                       |
| 3. | amount      | Ether                               | value                      |
| 4. | data        | optional field                      |                            |
| 5. | STARTGAS    | max number of "computational steps" | gas_provided               |
| 6. | GASPRICE    | fee per "computational step"        | gas_price                  |

***** Gasprice
- For each "computational step" => 1 Gas
- Some computations > 1 Gas
- For each *byte* in data => 5 Gas

**** 2. Message
#+begin_verse
ALWAYS PRODUCED BY A CONTRACT
#+end_verse

- Each message consists of 5 components:

|  # | message   | description                         |
|----+-----------+-------------------------------------|
| 1. | sender    | (implicit)                          |
| 2. | recipient |                                     |
| 3. | amount    | Ether                               |
| 4. | data      | optional                            |
| 5. | STARTGAS  | max number of "computational steps" |

*** How to identify externally owned accounts?
- identify by private key
- Has *NO* contract code
- Can be used to send messages to *contract accounts* by creating and signing a transaction

**** Type of messages


*** How does a tx relate to the involved parties?
- ..

*** How to identify a transaction used for plain ETH transfer?
- The transaction must be between 2 *Externally Owned Accounts*
- Both =To= and =From= cannot be found within contracts
- They cannot be special addresses
  (i.e. =0x0000000000000000000000000000000000000000=)

#+begin_src
SELECT *
FROM   public.transactions
WHERE  "from" NOT IN (
   SELECT DISTINCT address
   FROM public.contracts
   )
AND "to" NOT IN (
   SELECT DISTINCT address
   FROM public.contracts
)
AND "from" != '0x0000000000000000000000000000000000000000'
AND "to" != '0x0000000000000000000000000000000000000000'
AND status = 'true';


#+end_src

*** What is a WEI?
- 1 WEI = 0.000000000000000001 ETHER

* Technical Choices

** Trade-Offs
- In the end the most practical approach seemed to go with doing the data
  workload entirely in the PGSQL engine.
- Golang had some translation issues that made it harder to work with the data
  such as very large Integer types.
- On the other hand having the data workloads in Golang could have provided
  advantages in terms of controlling the algorithms (sorting, aggregating, etc.)
- The decision to move away from the traditional CRUD RESTful approach in favor
  of using a service layer is a double edged sword
- Especially, when it comes to providing server and client components using the
  same service layer, it will be a huge advantage compared to CRUD model
- Latter is more well-known so code readability may be affected by moving to
  another direction

** Improvements
- My learning from a strongly implemented design pattern as in grpc/protobuf
  makes me look back on a very manual and loosely style of defining the echo
  server service (RESTful)
- [[https://github.com/go-kit/kit][go-kit]] seems to offer a very interesting approach and touching on many of the
  paradigms implemented in grpc. (i.e. especially the service first
  definition approach but also focuses on separation of concerns and their
  abstract definitions with interfaces)
- I also want to look into [[https://github.com/GrantZheng/kit][go-kit code generators]].
- [[https://github.com/asim/go-micro][https://github.com/asim/go-micro]]

